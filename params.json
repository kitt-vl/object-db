{"name":"ObjectDB","tagline":"","body":"# NAME\r\n\r\nObjectDB - usable ORM\r\n\r\n# SYNOPSIS\r\n\r\n    package MyDB;\r\n    use base 'ObjectDB';\r\n\r\n    sub init_db {\r\n        ...\r\n        return $dbh;\r\n    }\r\n\r\n    package MyAuthor;\r\n    use base 'MyDB';\r\n\r\n    __PACKAGE__->meta(\r\n        table          => 'author',\r\n        columns        => [qw/id name/],\r\n        primary_key    => 'id',\r\n        auto_increment => 'id',\r\n        relationships  => {\r\n            books => {\r\n                type = 'one to many',\r\n                class => 'MyBook',\r\n                map   => {id => 'author_id'}\r\n            }\r\n        }\r\n    );\r\n\r\n    package MyBook;\r\n    use base 'MyDB';\r\n\r\n    __PACKAGE__->meta(\r\n        table          => 'book',\r\n        columns        => [qw/id author_id title/],\r\n        primary_key    => 'id',\r\n        auto_increment => 'id',\r\n        relationships  => {\r\n            author => {\r\n                type = 'many to one',\r\n                class => 'MyAuthor',\r\n                map   => {author_id => 'id'}\r\n            }\r\n        }\r\n    );\r\n\r\n    my $book_by_id = MyBook->new(id => 1)->load(with => 'author');\r\n\r\n    my @books_authored_by_Pushkin =\r\n      MyBook->table->find(where => ['author.name' => 'Pushkin']);\r\n\r\n    $author->create_related('books', title => 'New Book');\r\n\r\n# DESCRIPTION\r\n\r\nObjectDB is a lightweight and flexible object-relational mapper. While being\r\nlight it stays usable. ObjectDB borrows many things from [Rose::DB::Object](http://search.cpan.org/perldoc?Rose::DB::Object),\r\nbut unlike in the last one columns are not objects, everything is pretty much\r\nstraightforward and flat.\r\n\r\nSupported servers: SQLite, MySQL, PostgreSQL\r\n\r\n## Actions on columns\r\n\r\n### Methods\r\n\r\n- `set_columns`\r\n\r\n    Set columns.\r\n\r\n        $book->set_columns(title => 'New Book', pages => 140);\r\n\r\n- `set_column`\r\n\r\n    Set column.\r\n\r\n        $book->set_column(title => 'New Book');\r\n\r\n- `get_column`\r\n\r\n        my $title = $book->get_column('title');\r\n- `column`\r\n\r\n    A shortcut for `set_column`/`get_column`.\r\n\r\n        $book->column(title => 'New Book');\r\n        my $title = $book->column('title');\r\n\r\n## Actions on rows\r\n\r\nMain ObjectDB instance represents a row object. All actions performed on this\r\ninstance are performed on one row. For performing actions on several rows see\r\n[ObjectDB::Table](http://search.cpan.org/perldoc?ObjectDB::Table).\r\n\r\n### Methods\r\n\r\n- `create`\r\n\r\n    Creates a new row. If `meta` has an `auto_increment` column then it is\r\n    properly set.\r\n\r\n        my $author = MyAuthor->new(name => 'Me')->create;\r\n\r\n    It is possible to create related objects automatically:\r\n\r\n        my $author = MyAuthor->new(\r\n            name  => 'Me',\r\n            books => [{title => 'Book1'}, {title => 'Book2'}]\r\n        )->create;\r\n\r\n    Which is a convenient way of calling C <create\\_related> manually .\r\n\r\n- `load`\r\n\r\n    Loads an object by primary or unique key.\r\n\r\n        my $author = MyAuthor->new(id => 1)->load;\r\n\r\n    It is possible to load an object with related objects.\r\n\r\n        my $book = MyBook->new(title => 'New Book')->load(with => 'author');\r\n\r\n- `update`\r\n\r\n    Updates an object.\r\n\r\n        $book->set_column(title => 'Old Title');\r\n        $book->update;\r\n\r\n- `delete`\r\n\r\n    Deletes an object. Related objects are NOT deleted.\r\n\r\n        $book->delete;\r\n\r\n## Actions on tables\r\n\r\nIn order to perform an action on table a [ObjectDB::Table](http://search.cpan.org/perldoc?ObjectDB::Table) object must be\r\nobtained via `table` method (see [ObjectDB::Table](http://search.cpan.org/perldoc?ObjectDB::Table) for all available actions).\r\nThe only exception is `find`, it is available in a row object for convenience.\r\n\r\n    MyBook->table->delete; # deletes ALL records from MyBook\r\n\r\n## Actions on related objects\r\n\r\n### Methods\r\n\r\n- `related`\r\n\r\n    Returns preloaded related objects or loads them on demand.\r\n\r\n        # same as find_related but with caching\r\n        my $description = $book->related('book_description');\r\n\r\n        # returns from cache\r\n        my $description = $book->related('book_description');\r\n\r\n- `create_related`\r\n\r\n    Creates related object, setting appropriate foreign keys. Accepts a list, a hash\r\n    reference, an object.\r\n\r\n        $author->create_related('books', title => 'New Book');\r\n        $author->create_related('books', MyBook->new(title => 'New Book'));\r\n\r\n- `find_related`\r\n\r\n    Finds related object.\r\n\r\n        my $books = $author->find_related('books', where => [title => 'New Book']);\r\n\r\n- `update_related`\r\n\r\n    Updates related object.\r\n\r\n        $author->update_related(\r\n            'books',\r\n            set   => {title => 'Old Book'},\r\n            where => [title => 'New Book']\r\n        );\r\n\r\n- `delete_related`\r\n\r\n    Deletes related object.\r\n\r\n        $author->delete_related('books', where => [title => 'New Book']);\r\n\r\n## Transactions\r\n\r\nAll the exceptions will be catched, a rollback will be run and exceptions will\r\nbe rethrown. It is safe to use `rollback` or `commit` inside of a transaction\r\nwhen you want to do custom exception handling.\r\n\r\n    MyDB->txn(\r\n        sub {\r\n            ... do smth that can throw ...\r\n        }\r\n    );\r\n\r\n`txn`'s return value is preserved, so it is safe to do something like:\r\n\r\n    my $result = MyDB->txn(\r\n        sub {\r\n            return 'my result';\r\n        }\r\n    );\r\n\r\n### Methods\r\n\r\n- `txn`\r\n\r\n    Accepts a subroutine reference, wraps code into eval and runs it rethrowing all\r\n    exceptions.\r\n\r\n- `commit`\r\n\r\n    Commit transaction.\r\n\r\n- `rollback`\r\n\r\n    Rollback transaction.\r\n\r\n## Utility methods\r\n\r\n### Methods\r\n\r\n- `meta`\r\n\r\n    Returns meta object. See `ObjectDB::Meta`.\r\n\r\n- `init_db`\r\n\r\n    Returns current `DBI` instance.\r\n\r\n- `is_modified`\r\n\r\n    Returns 1 if object is modified.\r\n\r\n- `is_in_db`\r\n\r\n    Returns 1 if object is in database.\r\n\r\n- `is_related_loaded`\r\n\r\n    Checks if related objects are loaded.\r\n\r\n- `clone`\r\n\r\n    Clones object preserving all columns except primary or unique keys.\r\n\r\n- `to_hash`\r\n\r\n    Converts object into a hash reference, including all preloaded objects.\r\n\r\n# AUTHOR\r\n\r\nViacheslav Tykhanovskyi\r\n\r\n# COPYRIGHT AND LICENSE\r\n\r\nCopyright 2013, Viacheslav Tykhanovskyi.\r\n\r\nThis module is free software, you may distribute it under the same terms as Perl.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}